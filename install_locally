#!/usr/bin/python3
#	knitpi - Raspberry Pi interface for Brother KH-930 knitting machine
#	Copyright (C) 2018-2018 Johannes Bauer
#
#	This file is part of knitpi.
#
#	knitpi is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	knitpi is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with knitpi; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import pwd
import time
import subprocess

config = {
	"username":		"knitpi",
	"gitremote":	"https://github.com/johndoe31415/knitpi",
	"apt-pkgs":		[ "git", "python3", "python3-pip", "libpng-dev" ],
}
config["homedir"] = "/home/%s" % (config["username"])
config["gitdir"] = config["homedir"] + "/knitpi"

if os.getuid() != 0:
	print("You must run this script as root.", file = sys.stderr)
	sys.exit(1)

# Install all packages that are required
subprocess.check_call([ "apt-get", "install" ] + config["apt-pkgs"])

# Check if knitpi user exists. Create it if it doesn't.
try:
	pwdinfo = pwd.getpwnam(config["username"])
except KeyError:
	homedir = "/home/%s" % (config["username"])
	subprocess.check_call([ "useradd", "-c", "KnitPi User", "-d", homedir, "-G", "gpio,spi", "-s", "/bin/bash", "knitpi" ])
pwdinfo = pwd.getpwnam(config["username"])

if not os.path.isdir(config["homedir"]):
	os.mkdir(config["homedir"])
	os.chown(config["homedir"], pwdinfo.pw_uid, pwdinfo.pw_gid)
	os.chmod(config["homedir"], 0o700)

# Do the local setup as user in forked process
pid = os.fork()
if pid == 0:
	# We're the child process. Drop privileges.
	os.setgroups([ ])
	os.setgid(pwdinfo.pw_gid)
	os.setuid(pwdinfo.pw_uid)
	chg_env = dict(os.environ)
	chg_env["HOME"] = config["homedir"]
	chg_env["USER"] = config["username"]
	chg_env["LOGNAME"] = config["username"]
	
	if not os.path.isdir(config["gitdir"]):
		# Git not yet cloned.
		os.chdir(config["homedir"])
		subprocess.check_call([ "git", "clone", config["gitremote"] ], env = chg_env)

	# Reset to latest master
	os.chdir(config["gitdir"])
	subprocess.check_call([ "git", "clean", "-dfx" ], env = chg_env)
	subprocess.check_call([ "git", "reset", "--hard", "origin/master" ], env = chg_env)
	subprocess.check_call([ "git", "checkout", "master" ], env = chg_env)
	subprocess.check_call([ "git", "pull" ], env = chg_env)

	# Compile firmware
	os.chdir(config["gitdir"] + "/firmware")
	subprocess.check_call([ "make" ], env = chg_env)
	
	# Download uwsgi
	subprocess.check_call([ "pip3", "install", "uwsgi" ], env = chg_env)

	sys.exit(0)
else:
	# Wait for child to finish
	os.waitpid(pid, 0)

# Then create the systemd services for the core
with open("/etc/systemd/system/knitpi-core.service", "w") as f:
	print("[Unit]", file = f)
	print("Description=KnitPi core", file = f)
	print(file = f)
	print("[Service]", file = f)
	print("Type=simple", file = f)
	print("ExecStart=%s/firmware/knitserver -v %s/socket" % (config["gitdir"], config["homedir"]), file = f)
	print("User=%s" % (config["username"]), file = f)
	print(file = f)
	print("[Install]", file = f)
	print("WantedBy=multi-user.target", file = f)
os.chmod("/etc/systemd/system/knitpi-core.service", 0o644)
subprocess.check_call([ "systemctl", "enable", "knitpi-core" ])
subprocess.check_call([ "systemctl", "start", "knitpi-core" ])


# And also for the UI
with open("/etc/systemd/system/knitpi-ui.service", "w") as f:
	print("[Unit]", file = f)
	print("Description=KnitPi user interface", file = f)
	print("After=network.target", file = f)
	print(file = f)
	print("[Service]", file = f)
	print("Type=simple", file = f)
	print("ExecStart=%s/.local/bin/uwsgi knitui_prod.ini" % (config["homedir"]), file = f)
	print("User=%s" % (config["username"]), file = f)
	print("WorkingDirectory=%s/knitpi/ui" % (config["homedir"]), file = f)
	print("AmbientCapabilities=CAP_NET_BIND_SERVICE", file = f)
	print(file = f)
	print("[Install]", file = f)
	print("WantedBy=multi-user.target", file = f)
os.chmod("/etc/systemd/system/knitpi-ui.service", 0o644)
subprocess.check_call([ "systemctl", "enable", "knitpi-ui" ])
subprocess.check_call([ "systemctl", "start", "knitpi-ui" ])
